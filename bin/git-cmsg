#!/bin/bash

COLOR_INFO=$(tput setaf 6 2> /dev/null)
COLOR_WARN=$(tput setaf 3 2> /dev/null)
COLOR_ERR=$(tput setaf 1 2> /dev/null)
COLOR_RESET=$(tput sgr0 2> /dev/null)

# variables
notGit="fatal: Not a git repository (or any of the parent directories): .git"

function error {
	printf "${COLOR_ERR}%s\n${COLOR_RESET}" "$1"
	exit 1
}

function usage {
	cat <<USAGE
$0 [-b <name>] [-a] [-v] [-f] [-l] [-v] <git message>

Options:
	-a		add the files to git commit
	-b <name>	Branch name to deploy. Applied to all services.
	-d		Dry run.
	-h		Prints this information
	-v		Verbose output.
USAGE
	exit 64
}

DRYRUN=0
VERBOSE=0
ADD=0
FLAGS="-"
ARGS=
BRANCH="$(git symbolic-ref --short HEAD)"

function parse_option {
	local OPTION="$1"
	local optarg="$2"

    case $OPTION in
		a)
			git add .
			FLAGS="${FLAGS}a"
			;;
		b)
			BRANCH=$optarg
			;;
		d)
			DRYRUN=1
			;;
		h)
			usage
			;;
		v)
			FLAGS="${FLAGS}v"
			VERBOSE=1
			;;
		?)
			usage
			;;
     esac
}
function parse {
	local OPTIONS="ab:dhv"
	local OPTION OPTIND OPTARG

	while getopts "$OPTIONS" OPTION "$@"; do
		parse_option "$OPTION" "$OPTARG"
	done

	ARGS="${@:$OPTIND}"
	let OPTIND++

	while getopts "$OPTIONS" OPTION "$@"; do
		parse_option "$OPTION" "$OPTARG"
	done
}

parse "$@"

if [[ "$ARGS" == "" ]]; then
	error "Please include a message."
fi

if [[ "$BRANCH" == "$notGit" ]]; then
	error $notGit
fi

FLAGS="${FLAGS}m"

if (( DRYRUN )); then
	echo "${COLOR_INFO}Would have ran:${COLOR_RESET} git commit ${FLAGS} \"[${BRANCH}]: ${ARGS}\""
else
	git commit $FLAGS "[${BRANCH}]: ${ARGS}"
fi


