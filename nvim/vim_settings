""""""""""
" Leader
""""""""""
let mapleader="\\"
if exists('$TMUX')
	let &t_SI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=1\x7\<Esc>\\"
	let &t_EI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=0\x7\<Esc>\\"
else
	let &t_SI = "\<Esc>]50;CursorShape=1\x7"
	let &t_EI = "\<Esc>]50;CursorShape=0\x7"
endif

if has('nvim')
	let $NVIM_TUI_ENABLE_CURSOR_SHAPE=1
endif

set guicursor=n-v-c:block,i-ci-ve:ver25,r-cr:hor20,o:hor50
                  \,a:blinkwait700-blinkoff400-blinkon250-Cursor/lCursor
                  \,sm:block-blinkwait175-blinkoff150-blinkon175
""""""""""""
" Nerdtree
""""""""""""
let NERDTreeAutoDeleteBuffer=1
let g:NERDTreeMouseMode=2
let NERDTreeIgnore = ['^\.git$', 'node_modules', "\.pyc$", "\.DS_Store"]
let NERDTreeShowHidden=1

""""""""""""""""
" indent-guides
""""""""""""""""
let g:indent_guides_auto_colors = 0
hi IndentGuidesOdd  ctermbg=black
hi IndentGuidesEven ctermbg=darkgrey

""""""""""""
" Syntastic
""""""""""""
" set statusline+=%#warningmsg#
" set statusline+=%{SyntasticStatuslineFlag()}
" set statusline+=%*

" let g:syntastic_always_populate_loc_list = 1
" let g:syntastic_auto_loc_list = 1
" let g:syntastic_check_on_open = 1
" let g:syntastic_check_on_wq = 0

" let g:syntastic_html_tidy_blocklevel_tags = [ 'slide' , 'hgroup', 'slides', 'aside', 'footer']
" let g:syntastic_disabled_filetypes=['html']
" let g:syntastic_stl_format = '[%pe line:%fe]'
"

"""""""""""
" undotree
"""""""""""
if has('persistent_undo')
	set undofile                  " Save undo history to file
	set undodir=~/.vim/tmp/undo/  " undo files in folder
	set undolevels=100000         " Maximum number of undos
	set undoreload=100000         " Save complete files for undo on reload if it has less lines than this
endif

noremap <silent> <Leader>j :UndotreeToggle<cr>

""""""""""
" deoplete
""""""""""
let g:deoplete#enable_at_startup = 1
let g:deoplete#complete_method = 'omnifunc'

"""""""
" json
"""""""
let g:vim_json_syntax_conceal = 0

"""""""""
" grepper
"""""""""
nnoremap <leader>g :Grepper!<cr>
let g:grepper = {}
let g:grepper.tools = ['pt', 'grep', 'git', 'ag']
let g:grepper.next_tool = '<leader>g'

"""""""""
" airline
"""""""""
let airline#extensions#default#section_use_groupitems = 0

"""""""""
" preview
"""""""""

set completeopt-=preview
